// Generated by CoffeeScript 1.6.3
var DirectedGraph, DirectedObjectGraph, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore');

DirectedGraph = (function() {
  var A, PRESENT;

  PRESENT = new Object();

  A = 1;

  function DirectedGraph() {
    this._outs = {};
    this._ins = {};
    this._all = {};
  }

  DirectedGraph.prototype.toJSON = function() {
    return JSON.stringify({
      'all': this._all,
      'ins': this._ins,
      'outs': this._outs
    });
  };

  DirectedGraph.prototype.fromJSON = function(json) {
    var data;
    data = JSON.parse(json);
    this._all = data['all'];
    this._outs = data['outs'];
    return this._ins = data['ins'];
  };

  DirectedGraph.prototype.toString = function(toS) {
    var key, strings, values, _ref;
    if (toS == null) {
      toS = function(x) {
        return x;
      };
    }
    strings = [_.map(this.all(), toS).sort().join(',')];
    _ref = this._ins;
    for (key in _ref) {
      values = _ref[key];
      strings.push("" + (toS(key)) + " <- " + (_.map(values, toS).join(',')));
    }
    return strings.join("\n");
  };

  DirectedGraph.prototype.all = function() {
    return Object.keys(this._all);
  };

  DirectedGraph.prototype.size = function() {
    return _.size(this._all);
  };

  DirectedGraph.prototype.add = function(node) {
    return this._all[node] = PRESENT;
  };

  DirectedGraph.prototype.isMember = function(node) {
    return this._all[node] === PRESENT;
  };

  DirectedGraph.prototype.deleteUnconnected = function(node) {
    if (this.isDetached(node)) {
      return delete this._all[node];
    }
  };

  DirectedGraph.prototype.deleteConnected = function(node) {
    var end, start, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.outFrom(node);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      end = _ref[_i];
      this.removeEdge(node, end);
    }
    _ref1 = this.inTo(node);
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      start = _ref1[_j];
      this.removeEdge(start, node);
    }
    return this.deleteUnconnected(node);
  };

  DirectedGraph.prototype.splice = function(node) {
    var end, ends, start, starts, _i, _len, _results;
    ends = this.outFrom(node);
    starts = this.inTo(node);
    this.deleteConnected(node);
    _results = [];
    for (_i = 0, _len = starts.length; _i < _len; _i++) {
      start = starts[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = ends.length; _j < _len1; _j++) {
          end = ends[_j];
          _results1.push(this.addEdge(start, end));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DirectedGraph.prototype.severOuts = function(node) {
    var outs,
      _this = this;
    outs = [];
    this.forEachOut(node, function(x, y) {
      return outs.push(y);
    });
    outs.reverse();
    _.each(outs, function(o) {
      return _this.deleteConnected(o);
    });
    return outs;
  };

  DirectedGraph.prototype.severIns = function(node) {
    var ins,
      _this = this;
    ins = [];
    this.forEachIn(node, function(x, y) {
      return ins.push(y);
    });
    ins.reverse();
    _.each(ins, function(o) {
      return _this.deleteConnected(o);
    });
    return ins;
  };

  DirectedGraph.prototype.outFrom = function(node) {
    return this._outs[node] || [];
  };

  DirectedGraph.prototype.inTo = function(node) {
    return this._ins[node] || [];
  };

  DirectedGraph.prototype.isEdge = function(a, b) {
    return __indexOf.call(this.outFrom(a), b) >= 0;
  };

  DirectedGraph.prototype.addEdge = function(from, to) {
    this.add(from);
    this.add(to);
    this._link(from, this._outs, to);
    return this._link(to, this._ins, from);
  };

  DirectedGraph.prototype.removeEdge = function(from, to) {
    this._unlink(from, this._outs, to);
    return this._unlink(to, this._ins, from);
  };

  DirectedGraph.prototype.hasConnections = function(node) {
    return (this._outs[node] != null) || (this._ins[node] != null);
  };

  DirectedGraph.prototype.isDetached = function(node) {
    return this.isMember(node) && !this.hasConnections(node);
  };

  DirectedGraph.prototype.forEachIn = function(node, f) {
    if (!this.isMember(node)) {
      return;
    }
    return this._follow(node, this._ins, f);
  };

  DirectedGraph.prototype.forEachOut = function(node, f) {
    if (!this.isMember(node)) {
      return;
    }
    return this._follow(node, this._outs, f);
  };

  DirectedGraph.prototype.commonPredecessor = function(a, b) {
    var common, path;
    path = [];
    this.forEachIn(a, function(x, y) {
      return path.push(y);
    });
    common = null;
    this.forEachIn(b, function(x, y) {
      if (__indexOf.call(path, y) >= 0) {
        common = y;
        return false;
      }
    });
    return common;
  };

  DirectedGraph.prototype.commonDescendant = function(a, b) {
    var common, path;
    path = [];
    this.forEachOut(a, function(x, y) {
      return path.push(y);
    });
    common = null;
    this.forEachOut(b, function(x, y) {
      if (__indexOf.call(path, y) >= 0) {
        common = y;
        return false;
      }
    });
    return common;
  };

  DirectedGraph.prototype.withoutOutgoing = function() {
    var _this = this;
    return _.filter(this.all(), function(n) {
      return _this.outFrom(n).length === 0;
    });
  };

  DirectedGraph.prototype.withoutIncoming = function() {
    var _this = this;
    return _.filter(this.all(), function(n) {
      return _this.inTo(n).length === 0;
    });
  };

  DirectedGraph.prototype._follow = function(from, map, f, seen, last) {
    var follow, to, _i, _len, _results;
    if (seen == null) {
      seen = {};
    }
    if (last == null) {
      last = null;
    }
    if (f(last, from) === false) {
      return;
    }
    seen[from] = PRESENT;
    follow = map[from];
    if (follow != null) {
      _results = [];
      for (_i = 0, _len = follow.length; _i < _len; _i++) {
        to = follow[_i];
        if (seen[to] !== PRESENT) {
          _results.push(this._follow(to, map, f, seen, from));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  DirectedGraph.prototype._link = function(from, map, to) {
    var to_list;
    to_list = map[from];
    if (to_list != null) {
      if (__indexOf.call(to_list, to) < 0) {
        return to_list.push(to);
      }
    } else {
      return map[from] = [to];
    }
  };

  DirectedGraph.prototype._unlink = function(from, map, to) {
    var index, to_list;
    to_list = map[from];
    if (to_list != null) {
      index = to_list.indexOf(to);
      if (index > -1) {
        to_list.splice(index, 1);
      }
      if (to_list.length === 0) {
        return delete map[from];
      }
    }
  };

  return DirectedGraph;

})();

DirectedObjectGraph = (function() {
  function DirectedObjectGraph(keys) {
    if (keys == null) {
      keys = new Keys();
    }
    this.keys = keys;
    this.g = new DirectedGraph();
  }

  DirectedObjectGraph.prototype.toString = function() {
    var _this = this;
    return this.g.toString(function(x) {
      return _this.keys.value(x).toString();
    });
  };

  DirectedObjectGraph.prototype.add = function(node) {
    return this.g.add(this.keys.key(node));
  };

  DirectedObjectGraph.prototype.all = function() {
    return this.keys.value(this.g.all());
  };

  DirectedObjectGraph.prototype.size = function() {
    return this.g.size();
  };

  DirectedObjectGraph.prototype.find = function(key) {
    return this.keys.value(key);
  };

  DirectedObjectGraph.prototype.isMember = function(node) {
    return this.g.isMember(this.keys.key(node));
  };

  DirectedObjectGraph.prototype.deleteUnconnected = function(node) {
    this.g.deleteUnconnected(this.keys.key(node));
    return this.keys.remove(node);
  };

  DirectedObjectGraph.prototype.deleteConnected = function(node) {
    this.g.deleteConnected(this.keys.key(node));
    return this.keys.remove(node);
  };

  DirectedObjectGraph.prototype.severOuts = function(node) {
    var removed,
      _this = this;
    removed = this.keys.value(this.g.severOuts(this.keys.key(node)));
    return _.each(removed, function(r) {
      return _this.keys.remove(r);
    });
  };

  DirectedObjectGraph.prototype.severIns = function(node) {
    var removed,
      _this = this;
    removed = this.keys.value(this.g.severIns(this.keys.key(node)));
    return _.each(removed, function(r) {
      return _this.keys.remove(r);
    });
  };

  DirectedObjectGraph.prototype.splice = function(node) {
    this.g.splice(this.keys.key(node));
    return this.keys.remove(node);
  };

  DirectedObjectGraph.prototype.outFrom = function(node) {
    return this.keys.value(this.g.outFrom(this.keys.key(node)));
  };

  DirectedObjectGraph.prototype.inTo = function(node) {
    return this.keys.value(this.g.inTo(this.keys.key(node)));
  };

  DirectedObjectGraph.prototype.isEdge = function(a, b) {
    var _ref;
    return (_ref = this.g).isEdge.apply(_ref, this.keys.key([a, b]));
  };

  DirectedObjectGraph.prototype.addEdge = function(from, to) {
    return this.g.addEdge.apply(this.g, this.keys.key([from, to]));
  };

  DirectedObjectGraph.prototype.removeEdge = function(from, to) {
    return this.g.removeEdge.apply(this.g, this.keys.key([from, to]));
  };

  DirectedObjectGraph.prototype.hasConnections = function(node) {
    return this.g.hasConnections(this.keys.key(node));
  };

  DirectedObjectGraph.prototype.isDetached = function(node) {
    return this.g.isDetached(this.keys.key(node));
  };

  DirectedObjectGraph.prototype.forEachIn = function(node, f) {
    var g,
      _this = this;
    g = function(k, l) {
      return f.apply(_this, _this.keys.value([k, l]));
    };
    return this.g.forEachIn(this.keys.key(node), g);
  };

  DirectedObjectGraph.prototype.forEachOut = function(node, f) {
    var g,
      _this = this;
    g = function(k, l) {
      return f.apply(_this, _this.keys.value([k, l]));
    };
    return this.g.forEachOut(this.keys.key(node), g);
  };

  DirectedObjectGraph.prototype.commonDescendant = function(a, b) {
    return this.keys.value(this.g.commonDescendant.apply(this.g, this.keys.key([a, b])));
  };

  DirectedObjectGraph.prototype.commonPredecessor = function(a, b) {
    return this.keys.value(this.g.commonPredecessor.apply(this.g, this.keys.key([a, b])));
  };

  DirectedObjectGraph.prototype.withoutOutgoing = function() {
    return this.keys.value(this.g.withoutOutgoing());
  };

  DirectedObjectGraph.prototype.withoutIncoming = function() {
    return this.keys.value(this.g.withoutIncoming());
  };

  return DirectedObjectGraph;

})();

exports.DirectedGraph = DirectedGraph;

exports.DirectedObjectGraph = DirectedObjectGraph;
